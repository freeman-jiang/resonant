generator client {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = "5"
  previewFeatures      = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "vecs"]
}

model Page {
  id            Int          @id @default(autoincrement())
  url           String       @unique
  parent_url    String?
  title         String?
  date          String?
  author        String?
  content       String
  content_hash  String       @unique // A 128-bit MurmurHash3 hash of the content
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  depth Int         @default(0)
  outbound_urls String[]
  embeddings    Embeddings[]

  liked_by  LikedPage[]
  feeded_by FeedPage[]

  @@schema("public")
}


enum TaskStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  FILTERED

  @@schema("public")
}

model CrawlTask {
  id         Int        @id @default(autoincrement())
  status     TaskStatus
  url        String     @unique
  depth      Int        @default(0)
  text       String
  parent_url String?
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt

  @@schema("public")
}

model Embeddings {
  id__  Int                        @id @default(autoincrement())
  url   String
  index Int
  page  Page                       @relation(fields: [url], references: [url], onDelete: Cascade)
  vec   Unsupported("vector(768)")

  @@schema("vecs")
}

model User {
  id          Int         @id @default(autoincrement())
  liked_pages LikedPage[]
  feed        FeedPage[]

  @@schema("public")
}

model FeedPage {
  id                Int @id @default(autoincrement())
  user_id           Int
  page_id           Int
  suggested_from_id Int
  score            Float @default(0)

  user           User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  page           Page      @relation(fields: [page_id], references: [id], onDelete: Cascade)
  suggested_from LikedPage @relation(fields: [suggested_from_id], references: [id], onDelete: Cascade)

  @@unique([user_id, page_id, suggested_from_id], name: "feed_pages_user_id_page_id_suggested_from_id")
  @@index([user_id], name: "feed_pages_user_id")
  @@index([page_id], name: "feed_pages_page_id")
  @@schema("public")
}

model LikedPage {
  id      Int @id @default(autoincrement())
  user_id Int
  page_id Int

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  page Page @relation(fields: [page_id], references: [id], onDelete: Cascade)

  suggestions FeedPage[]

  @@unique([user_id, page_id], name: "liked_pages_user_id_page_id")
  @@index([user_id], name: "liked_pages_user_id")
  @@index([page_id], name: "liked_pages_page_id")
  @@schema("public")
}
