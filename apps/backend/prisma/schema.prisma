generator client {
  provider             = "prisma-client-py"
  previewFeatures      = ["multiSchema"]
  recursive_type_depth = "5"
  interface            = "asyncio"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_SUPABASE")
  schemas  = ["public", "vecs"]
}

model Page {
  id            Int          @id @default(autoincrement())
  title         String?
  date          String?
  author        String?
  content       String
  created_at    DateTime     @default(now())
  updated_at    DateTime     @default(now()) @updatedAt
  outbound_urls String[]
  parent_url    String?
  url           String       @unique
  content_hash  String       @unique
  depth         Int          @default(0)
  page_rank     Float?
  embeddings    Embeddings[]

  @@schema("public")
}

model CrawlTask {
  id         Int        @id @default(autoincrement())
  status     TaskStatus
  url        String     @unique
  depth      Int        @default(0)
  text       String
  parent_url String?
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now()) @updatedAt
  boost      Float      @default(1)

  @@schema("public")
}

model Embeddings {
  id__  Int                   @id @default(autoincrement())
  vec   Unsupported("vector")
  index Int
  url   String
  page  Page                  @relation(fields: [url], references: [url], onDelete: Cascade)

  @@index([vec])
  @@index([url])
  @@schema("vecs")
}

model User {
  id                  String      @id @db.Uuid
  email               String      @unique
  first_name          String
  last_name           String
  profile_picture_url String?
  website             String?
  twitter             String?
  liked_pages         LikedPage[]
  sent_messages       Message[]   @relation("SentMessages")
  received_messages   Message[]   @relation("ReceivedMessages")
  followedBy          User[]      @relation("UserFollows")
  following           User[]      @relation("UserFollows")
  created_at          DateTime    @default(now()) @db.Timestamptz
  updated_at          DateTime    @default(now()) @updatedAt @db.Timestamptz
  Comment             Comment[]

  @@schema("public")
}

model LikedPage {
  id         Int      @id @default(autoincrement())
  user_id    String   @db.Uuid
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  page_id    Int // Do not link the page because it's not stored in Supabase
  created_at DateTime @default(now()) @db.Timestamptz

  @@unique([user_id, page_id], name: "liked_pages_user_id_page_id")
  @@index([user_id], map: "liked_pages_user_id")
  @@index([page_id], map: "liked_pages_page_id")
  @@schema("public")
}

enum TaskStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  FILTERED

  MANUAL_REVIEW

  @@schema("public")
}

model Rss {
  id         Int      @id @default(autoincrement())
  url        String   @unique
  created_at DateTime @default(now()) @db.Timestamptz
  last_crawled_at DateTime @default("2000-01-01T01:01:00.52Z")  @db.Timestamptz

  @@schema("public")
}

model Message {
  id Int @id @default(autoincrement())

  sender_id   String   @db.Uuid
  receiver_id String   @db.Uuid
  page_id     Int?
  url         String?
  message     String?
  sent_on     DateTime @default(now()) @db.Timestamptz

  sender   User @relation("SentMessages", fields: [sender_id], references: [id], onDelete: Restrict)
  receiver User @relation("ReceivedMessages", fields: [receiver_id], references: [id], onDelete: Restrict)

  @@schema("public")
}

model Comment {
  id         Int       @id @default(autoincrement())
  is_deleted Boolean   @default(false)
  content    String
  created_at DateTime  @default(now()) @db.Timestamptz
  updated_at DateTime? @updatedAt @db.Timestamptz
  upvotes    Int       @default(0)
  author_id  String    @db.Uuid
  author     User      @relation(fields: [author_id], references: [id])
  parent_id  Int?
  parent     Comment?  @relation("Children", fields: [parent_id], references: [id])
  children   Comment[] @relation("Children")

  page_id Int // Do not link the page because it's not stored in Supabase

  @@schema("public")
}
