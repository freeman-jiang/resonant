generator client {
  provider             = "prisma-client-py"
  previewFeatures      = ["multiSchema"]
  recursive_type_depth = "5"
  interface            = "asyncio"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_SUPABASE")
  schemas  = ["public", "vecs"]
}

model Page {
  id            Int          @id @default(autoincrement())
  title         String?
  date          String?
  author        String?
  content       String
  created_at    DateTime     @default(now())
  updated_at    DateTime     @default(now()) @updatedAt
  outbound_urls String[]
  parent_url    String?
  url           String       @unique
  content_hash  String       @unique
  depth         Int          @default(0)
  page_rank     Float?
  embeddings    Embeddings[]

  @@schema("public")
}

model CrawlTask {
  id         Int        @id @default(autoincrement())
  status     TaskStatus
  url        String     @unique
  depth      Int        @default(0)
  text       String
  parent_url String?
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now()) @updatedAt
  boost      Float      @default(1)

  @@schema("public")
}

model Embeddings {
  id__  Int                   @id @default(autoincrement())
  vec   Unsupported("vector")
  index Int
  url   String
  page  Page                  @relation(fields: [url], references: [url], onDelete: Cascade)

  @@index([vec])
  @@schema("vecs")
}

model User {
  id                String      @id @db.Uuid
  email             String      @unique
  first_name        String
  last_name         String
  liked_pages       LikedPage[]
  sent_messages     Message[]   @relation("SentMessages")
  received_messages Message[]   @relation("ReceivedMessages")

  @@schema("public")
}

model LikedPage {
  id      Int    @id @default(autoincrement())
  user_id String @db.Uuid
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  page_id Int // Do not link the page because it's not stored in Supabase

  @@unique([user_id, page_id], name: "liked_pages_user_id_page_id")
  @@index([user_id], map: "liked_pages_user_id")
  @@index([page_id], map: "liked_pages_page_id")
  @@schema("public")
}

enum TaskStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  FILTERED

  @@schema("public")
}

model Message {
  id        Int    @id @default(autoincrement())
  sender_id String @db.Uuid
  sender    User   @relation("SentMessages", fields: [sender_id], references: [id], onDelete: Restrict)

  receiver_id String  @db.Uuid
  receiver    User    @relation("ReceivedMessages", fields: [receiver_id], references: [id], onDelete: Restrict)
  page_id     Int?
  url         String?
  message     String?

  sent_on DateTime @default(now()) @db.Timestamptz
  userId  String?  @db.Uuid

  @@schema("public")
}
