_articles = [
    {'title': "Do Things that Don't Scale", 'content': '''July 2013 One of the most common types of advice we give at Y Combinator is to do things that don't scale. A lot of would-be founders believe that startups either take off or don't. You build something, make it available, and if you've made a better mousetrap, people beat a path to your door as promised. Or they don't, in which case the market must not exist. [ 1 ] Actually startups take off because the founders make them take off. There may be a handful that just grew by themselves, but usually it takes some sort of push to get them going. A good metaphor would be the cranks that car engines had before they got electric starters. Once the engine was going, it would keep going, but there was a separate and laborious process to get it going. Recruit The most common unscalable thing founders have to do at the start is to recruit users manually. Nearly all startups have to. You can't wait for users to come to you. You have to go out and get them. Stripe is one of the most successful startups we've funded, and the problem they solved was an urgent one. If anyone could have sat back and waited for users, it was Stripe. But in fact they're famous within YC for aggressive early user acquisition. Startups building things for other startups have a big pool of potential users in the other companies we've funded, and none took better advantage of it than Stripe. At YC we use the term "Collison installation" for the technique they invented. More diffident founders ask "Will you try our beta?" and if the answer is yes, they say "Great, we'll send you a link." But the Collison brothers weren't going to wait. When anyone agreed to try Stripe they'd say "Right then, give me your laptop" and set them up on the spot. There are two reasons founders resist going out and recruiting users individually. One is a combination of shyness and laziness. They'd rather sit at home writing code than go out and talk to a bunch of strangers and probably be rejected by most of them. But for a startup to succeed, at least one founder (usually the CEO) will have to spend a lot of time on sales and marketing. [ 2 ] The other reason founders ignore this path is that the absolute numbers seem so small at first. This can't be how the big, famous startups got started, they think. The mistake they make is to underestimate the power of compound growth. We encourage every startup to measure their progress by weekly growth rate . If you have 100 users, you need to get 10 more next week to grow 10% a week. And while 110 may not seem much better than 100, if you keep growing at 10% a week you'll be surprised how big the numbers get. After a year you'll have 14,000 users, and after 2 years you'll have 2 million. You'll be doing different things when you're acquiring users a thousand at a time, and growth has to slow down eventually. But if the market exists you can usually start by recruiting users manually and then gradually switch to less manual methods. [ 3 ] Airbnb is a classic example of this technique. Marketplaces are so hard to get rolling that you should expect to take heroic measures at first. In Airbnb's case, these consisted of going door to door in New York, recruiting new users and helping existing ones improve their listings. When I remember the Airbnbs during YC, I picture them with rolly bags, because when they showed up for tuesday dinners they'd always just flown back from somewhere. Fragile Airbnb now seems like an unstoppable juggernaut, but early on it was so fragile that about 30 days of going out and engaging in person with users made the difference between success and failure. That initial fragility was not a unique feature of Airbnb. Almost all startups are fragile initially. And that's one of the biggest things inexperienced founders and investors (and reporters and know-it-alls on forums) get wrong about them. They unconsciously judge larval startups by the standards of established ones. They're like someone looking at a newborn baby and concluding "there's no way this tiny creature could ever accomplish anything." It's harmless if reporters and know-it-alls dismiss your startup. They always get things wrong. It's even ok if investors dismiss your startup; they'll change their minds when they see growth. The big danger is that you'll dismiss your startup yourself. I've seen it happen. I often have to encourage founders who don't see the full potential of what they're building. Even Bill Gates made that mistake. He returned to Harvard for the fall semester after starting Microsoft. He didn't stay long, but he wouldn't have returned at all if he'd realized Microsoft was going to be even a fraction of the size it turned out to be. [ 4 ] The question to ask about an early stage startup is not "is this company taking over the world?" but "how big could this company get if the founders did the right things?" And the right things often seem both laborious and inconsequential at the time. Microsoft can't have seemed very impressive when it was just a couple guys in Albuquerque writing Basic interpreters for a market of a few thousand hobbyists (as they were then called), but in retrospect that was the optimal path to dominating microcomputer software. And I know Brian Chesky and Joe Gebbia didn't feel like they were en route to the big time as they were taking "professional" photos of their first hosts' apartments. They were just trying to survive. But in retrospect that too was the optimal path to dominating a big market. How do you find users to recruit manually? If you build something to solve your own problems , then you only have to find your peers, which is usually straightforward. Otherwise you'll have to make a more deliberate effort to locate the most promising vein of users. The usual way to do that is to get some initial set of users by doing a comparatively untargeted launch, and then to observe which kind seem most enthusiastic, and seek out more like them. For example, Ben Silbermann noticed that a lot of the earliest Pinterest users were interested in design, so he went to a conference of design bloggers to recruit users, and that worked well. [ 5 ] Delight You should take extraordinary measures not just to acquire users, but also to make them happy. For as long as they could (which turned out to be surprisingly long), Wufoo sent each new user a hand-written thank you note. Your first users should feel that signing up with you was one of the best choices they ever made. And you in turn should be racking your brains to think of new ways to delight them. Why do we have to teach startups this? Why is it counterintuitive for founders? Three reasons, I think. One is that a lot of startup founders are trained as engineers, and customer service is not part of the training of engineers. You're supposed to build things that are robust and elegant, not be slavishly attentive to individual users like some kind of salesperson. Ironically, part of the reason engineering is traditionally averse to handholding is that its traditions date from a time when engineers were less powerful — when they were only in charge of their narrow domain of building things, rather than running the whole show. You can be ornery when you're Scotty, but not when you're Kirk. Another reason founders don't focus enough on individual customers is that they worry it won't scale. But when founders of larval startups worry about this, I point out that in their current state they have nothing to lose. Maybe if they go out of their way to make existing users super happy, they'll one day have too many to do so much for. That would be a great problem to have. See if you can make it happen. And incidentally, when it does, you'll find that delighting customers scales better than you expected. Partly because you can usually find ways to make anything scale more than you would have predicted, and partly because delighting customers will by then have permeated your culture. I have never once seen a startup lured down a blind alley by trying too hard to make their initial users happy. But perhaps the biggest thing preventing founders from realizing how attentive they could be to their users is that they've never experienced such attention themselves. Their standards for customer service have been set by the companies they've been customers of, which are mostly big ones. Tim Cook doesn't send you a hand-written note after you buy a laptop. He can't. But you can. That's one advantage of being small: you can provide a level of service no big company can. [ 6 ] Once you realize that existing conventions are not the upper bound on user experience, it's interesting in a very pleasant way to think about how far you could go to delight your users. Experience I was trying to think of a phrase to convey how extreme your attention to users should be, and I realized Steve Jobs had already done it: insanely great. Steve wasn't just using "insanely" as a synonym for "very." He meant it more literally — that one should focus on quality of execution to a degree that in everyday life would be considered pathological. All the most successful startups we've funded have, and that probably doesn't surprise would-be founders. What novice founders don't get is what insanely great translates to in a larval startup. When Steve Jobs started using that phrase, Apple was already an established company. He meant the Mac (and its documentation and even packaging — such is the nature of obsession) should be insanely well designed and manufactured. That's not hard for engineers to grasp. It's just a more extreme version of designing a robust and elegant product. What founders have a hard time grasping (and Steve himself might have had a hard time grasping) is what insanely great morphs into as you roll the time slider back to the first couple months of a startup's life. It's not the product that should be insanely great, but the experience of being your user. The product is just one component of that. For a big company it's necessarily the dominant one. But you can and should give users an insanely great experience with an early, incomplete, buggy product, if you make up the difference with attentiveness. Can, perhaps, but should? Yes. Over-engaging with early users is not just a permissible technique for getting growth rolling. For most successful startups it's a necessary part of the feedback loop that makes the product good. Making a better mousetrap is not an atomic operation. Even if you start the way most successful startups have, by building something you yourself need, the first thing you build is never quite right. And except in domains with big penalties for making mistakes, it's often better not to aim for perfection initially. In software, especially, it usually works best to get something in front of users as soon as it has a quantum of utility, and then see what they do with it. Perfectionism is often an excuse for procrastination, and in any case your initial model of users is always inaccurate, even if you're one of them. [ 7 ] The feedback you get from engaging directly with your earliest users will be the best you ever get. When you're so big you have to resort to focus groups, you'll wish you could go over to your users' homes and offices and watch them use your stuff like you did when there were only a handful of them. Fire Sometimes the right unscalable trick is to focus on a deliberately narrow market. It's like keeping a fire contained at first to get it really hot before adding more logs. That's what Facebook did. At first it was just for Harvard students. In that form it only had a potential market of a few thousand people, but because they felt it was really for them, a critical mass of them signed up. After Facebook stopped being for Harvard students, it remained for students at specific colleges for quite a while. When I interviewed Mark Zuckerberg at Startup School, he said that while it was a lot of work creating course lists for each school, doing that made students feel the site was their natural home. Any startup that could be described as a marketplace usually has to start in a subset of the market, but this can work for other startups as well. It's always worth asking if there's a subset of the market in which you can get a critical mass of users quickly. [ 8 ] Most startups that use the contained fire strategy do it unconsciously. They build something for themselves and their friends, who happen to be the early adopters, and only realize later that they could offer it to a broader market. The strategy works just as well if you do it unconsciously. The biggest danger of not being consciously aware of this pattern is for those who naively discard part of it. E.g. if you don't build something for yourself and your friends, or even if you do, but you come from the corporate world and your friends are not early adopters, you'll no longer have a perfect initial market handed to you on a platter. Among companies, the best early adopters are usually other startups. They're more open to new things both by nature and because, having just been started, they haven't made all their choices yet. Plus when they succeed they grow fast, and you with them. It was one of many unforeseen advantages of the YC model (and specifically of making YC big) that B2B startups now have an instant market of hundreds of other startups ready at hand. Meraki For hardware startups there's a variant of doing things that don't scale that we call "pulling a Meraki." Although we didn't fund Meraki, the founders were Robert Morris's grad students, so we know their history. They got started by doing something that really doesn't scale: assembling their routers themselves. Hardware startups face an obstacle that software startups don't. The minimum order for a factory production run is usually several hundred thousand dollars. Which can put you in a catch-22: without a product you can't generate the growth you need to raise the money to manufacture your product. Back when hardware startups had to rely on investors for money, you had to be pretty convincing to overcome this. The arrival of crowdfunding (or more precisely, preorders) has helped a lot. But even so I'd advise startups to pull a Meraki initially if they can. That's what Pebble did. The Pebbles assembled the first several hundred watches themselves. If they hadn't gone through that phase, they probably wouldn't have sold $10 million worth of watches when they did go on Kickstarter. Like paying excessive attention to early customers, fabricating things yourself turns out to be valuable for hardware startups. You can tweak the design faster when you're the factory, and you learn things you'd never have known otherwise. Eric Migicovsky of Pebble said one of the things he learned was "how valuable it was to source good screws." Who knew? Consult Sometimes we advise founders of B2B startups to take over-engagement to an extreme, and to pick a single user and act as if they were consultants building something just for that one user. The initial user serves as the form for your mold; keep tweaking till you fit their needs perfectly, and you'll usually find you've made something other users want too. Even if there aren't many of them, there are probably adjacent territories that have more. As long as you can find just one user who really needs something and can act on that need, you've got a toehold in making something people want, and that's as much as any startup needs initially. [ 9 ] Consulting is the canonical example of work that doesn't scale. But (like other ways of bestowing one's favors liberally) it's safe to do it so long as you're not being paid to. That's where companies cross the line. So long as you're a product company that's merely being extra attentive to a customer, they're very grateful even if you don't solve all their problems. But when they start paying you specifically for that attentiveness — when they start paying you by the hour — they expect you to do everything. Another consulting-like technique for recruiting initially lukewarm users is to use your software yourselves on their behalf. We did that at Viaweb. When we approached merchants asking if they wanted to use our software to make online stores, some said no, but they'd let us make one for them. Since we would do anything to get users, we did. We felt pretty lame at the time. Instead of organizing big strategic e-commerce partnerships, we were trying to sell luggage and pens and men's shirts. But in retrospect it was exactly the right thing to do, because it taught us how it would feel to merchants to use our software. Sometimes the feedback loop was near instantaneous: in the middle of building some merchant's site I'd find I needed a feature we didn't have, so I'd spend a couple hours implementing it and then resume building the site. Manual There's a more extreme variant where you don't just use your software, but are your software. When you only have a small number of users, you can sometimes get away with doing by hand things that you plan to automate later. This lets you launch faster, and when you do finally automate yourself out of the loop, you'll know exactly what to build because you'll have muscle memory from doing it yourself. When manual components look to the user like software, this technique starts to have aspects of a practical joke. For example, the way Stripe delivered "instant" merchant accounts to its first users was that the founders manually signed them up for traditional merchant accounts behind the scenes. Some startups could be entirely manual at first. If you can find someone with a problem that needs solving and you can solve it manually, go ahead and do that for as long as you can, and then gradually automate the bottlenecks. It would be a little frightening to be solving users' problems in a way that wasn't yet automatic, but less frightening than the far more common case of having something automatic that doesn't yet solve anyone's problems. Big I should mention one sort of initial tactic that usually doesn't work: the Big Launch. I occasionally meet founders who seem to believe startups are projectiles rather than powered aircraft, and that they'll make it big if and only if they're launched with sufficient initial velocity. They want to launch simultaneously in 8 different publications, with embargoes. And on a tuesday, of course, since they read somewhere that's the optimum day to launch something. It's easy to see how little launches matter. Think of some successful startups. How many of their launches do you remember? All you need from a launch is some initial core of users. How well you're doing a few months later will depend more on how happy you made those users than how many there were of them. [ 10 ] So why do founders think launches matter? A combination of solipsism and laziness. They think what they're building is so great that everyone who hears about it will immediately sign up. Plus it would be so much less work if you could get users merely by broadcasting your existence, rather than recruiting them one at a time. But even if what you're building really is great, getting users will always be a gradual process — partly because great things are usually also novel, but mainly because users have other things to think about. Partnerships too usually don't work. They don't work for startups in general, but they especially don't work as a way to get growth started. It's a common mistake among inexperienced founders to believe that a partnership with a big company will be their big break. Six months later they're all saying the same thing: that was way more work than we expected, and we ended up getting practically nothing out of it. [ 11 ] It's not enough just to do something extraordinary initially. You have to make an extraordinary effort initially. Any strategy that omits the effort — whether it's expecting a big launch to get you users, or a big partner — is ipso facto suspect. Vector The need to do something unscalably laborious to get started is so nearly universal that it might be a good idea to stop thinking of startup ideas as scalars. Instead we should try thinking of them as pairs of what you're going to build, plus the unscalable thing(s) you're going to do initially to get the company going. It could be interesting to start viewing startup ideas this way, because now that there are two components you can try to be imaginative about the second as well as the first. But in most cases the second component will be what it usually is — recruit users manually and give them an overwhelmingly good experience — and the main benefit of treating startups as vectors will be to remind founders they need to work hard in two dimensions. [ 12 ] In the best case, both components of the vector contribute to your company's DNA: the unscalable things you have to do to get started are not merely a necessary evil, but change the company permanently for the better. If you have to be aggressive about user acquisition when you're small, you'll probably still be aggressive when you're big. If you have to manufacture your own hardware, or use your software on users's behalf, you'll learn things you couldn't have learned otherwise. And most importantly, if you have to work hard to delight users when you only have a handful of them, you'll keep doing it when you have a lot. Notes [ 1 ] Actually Emerson never mentioned mousetraps specifically. He wrote "If a man has good corn or wood, or boards, or pigs, to sell, or can make better chairs or knives, crucibles or church organs, than anybody else, you will find a broad hard-beaten road to his house, though it be in the woods." [ 2 ] Thanks to Sam Altman for suggesting I make this explicit. And no, you can't avoid doing sales by hiring someone to do it for you. You have to do sales yourself initially. Later you can hire a real salesperson to replace you. [ 3 ] The reason this works is that as you get bigger, your size helps you grow. Patrick Collison wrote "At some point, there was a very noticeable change in how Stripe felt. It tipped from being this boulder we had to push to being a train car that in fact had its own momentum." [ 4 ] One of the more subtle ways in which YC can help founders is by calibrating their ambitions, because we know exactly how a lot of successful startups looked when they were just getting started. [ 5 ] If you're building something for which you can't easily get a small set of users to observe — e.g. enterprise software — and in a domain where you have no connections, you'll have to rely on cold calls and introductions. But should you even be working on such an idea? [ 6 ] Garry Tan pointed out an interesting trap founders fall into in the beginning. They want so much to seem big that they imitate even the flaws of big companies, like indifference to individual users. This seems to them more "professional." Actually it's better to embrace the fact that you're small and use whatever advantages that brings. [ 7 ] Your user model almost couldn't be perfectly accurate, because users' needs often change in response to what you build for them. Build them a microcomputer, and suddenly they need to run spreadsheets on it, because the arrival of your new microcomputer causes someone to invent the spreadsheet. [ 8 ] If you have to choose between the subset that will sign up quickest and those that will pay the most, it's usually best to pick the former, because those are probably the early adopters. They'll have a better influence on your product, and they won't make you expend as much effort on sales. And though they have less money, you don't need that much to maintain your target growth rate early on. [ 9 ] Yes, I can imagine cases where you could end up making something that was really only useful for one user. But those are usually obvious, even to inexperienced founders. So if it's not obvious you'd be making something for a market of one, don't worry about that danger. [ 10 ] There may even be an inverse correlation between launch magnitude and success. The only launches I remember are famous flops like the Segway and Google Wave. Wave is a particularly alarming example, because I think it was actually a great idea that was killed partly by its overdone launch. [ 11 ] Google grew big on the back of Yahoo, but that wasn't a partnership. Yahoo was their customer. [ 12 ] It will also remind founders that an idea where the second component is empty — an idea where there is nothing you can do to get going, e.g. because you have no way to find users to recruit manually — is probably a bad idea, at least for those founders. Thanks to Sam Altman, Paul Buchheit, Patrick Collison, Kevin Hale, Steven Levy, Jessica Livingston, Geoff Ralston, and Garry Tan for reading drafts of this.'''},
    {'title': 'Confessions of a Middle-Class Founder', 'content': '''Sometime in the second half of the past decade, I decided to found a start-up. I was in my 20s and working at a mid-size tech company, and I didn’t yet have an idea, or even a general sense of where I wanted to focus. But I was convinced becoming a founder was the right thing to do next.  In college, I had majored in a discipline within the liberal arts. I would have liked to become a philosopher or a writer but lacked the intestinal fortitude to risk being poor, a perpetual worry in spite of — or because of — having enjoyed a solid upper-middle-class upbringing. My desire to be a capitalist may have crystallized a few years after graduation, when I attended a reading by a former professor, a lecturer from my alma mater, on tour for his new book. Seeing me in the audience, he invited me to a sumptuous dinner with several eminent literary types: an award-winning author, the proprietor of a cherished bookstore, a leading critic. We spent a great evening gossiping about famous writers, but when the check arrived, no one moved. Instead, we all made a furtive scan of the table — me, young with a tech job; them, decades older but sheltered from being first to reach for the bill by their commitment to art — realizing after an extended pause that no obviously rich person was around to pick up the tab. (We split it.)  I had always envied the gentry of the Enlightenment, who produced intellectual and artistic breakthroughs because they were smart but also because few others had the leisure to think. I also envied their modern equivalents, people with family money. What if I could make my own family money? That way, I could consummate my intellectual ambitions without sacrificing a reasonably bougie standard of living.  I began lurking in Reddit forums with names like “ FATFire ,” filled with people who obsessed over their “number”: the amount of money they wanted to sock away before they could pursue their whims forever. I remember hunching over a spreadsheet in a coffee shop one sunny weekend while my friends were at the beach, adding up the present value of my projected lifetime expenditures to estimate my own number. Of course, I had to factor in a safe withdrawal rate from my nest egg, private school for my hypothetical kids, and allowances like the occasional Michelin dinner. Around $6 million, I thought, ought to do it.  A strategy consists of matching means to an end; if my end was rapid financial independence, my means were youth, pedigree, lack of student debt, a prodigious capacity for work, and a lack of a faculty for combinatorics, which rendered me unsuitable for quantitative finance. It helped that I genuinely liked technology, had devoured science fiction and messed around with computers since I was little. The smart move was probably working for one of the FAANGs, which grew so reliably that you could chill and make a few hundred thousand dollars a year. But I didn’t want to do that. This was the mid-2010s. Though peak mania had yet to arrive, venture capitalists were showering people the same age as me with capital. Someone in my graduating class had just flipped a two year old start-up for a life-changing sum.  After several false starts, I was introduced to my co-founder by a mutual friend. He was affably bright in a way that balanced my neurotic tendencies, and I liked him right away. We had been exploring similar markets and started tinkering together on a promising idea: an outwardly boring but vast corner of a broader sector that was hot at the time. We fleshed out the idea over a series of whiteboard sessions at a WeWork, each followed by a trip to a dive bar where we’d get drunk and talk about our goals, speedrunning the process of becoming friends. We both agreed that we wanted money but not a lot. “What’s your number?” I asked.  “If we each made a few million,” he said, “that would be enough.”  Every founder tells themselves a story about why they’re heading to the gold rush, but the executive coach I would eventually hire says there are really only two. Do you want to be rich, generating wealth in service of some further end? Or do you want to be king, with money a mere byproduct of trying to make the world the way you feel it should be?  At the time, I told myself I wanted the freedom of being rich. I thought I’d be able to recognize a winning hand fast or fold. Now, several years later, I’m still waiting for the river card that determines my fate. You could call me a middle-class founder: proprietor of a business you may or may not have heard of, tenuously wealthy on paper, by no means a failure but not yet a success, chugging along in the twilight of an era that minted more giants and more waste than any other in history with no exit in sight.  Fans of  Paul Graham  — founder of Y Combinator, the leading start-up incubator in the land and one of the patron saints of the modern start-up era — would probably say my original sin was being a mercenary. For about a decade, starting when the first tech bubble popped in the early 2000s and ending with Facebook’s IPO in 2012, founding a start-up just to make money was both crass and unwise. If a founder wanted to raise money or hire the best people, the dogma went, it was important they lay claim to changing the world. Organize the world’s information (Google), bring the world closer together (Facebook), belong anywhere (Airbnb): The ideal founder was the protagonist of a Zen koan, or Harry Potter facing the desire mirror in The Sorcerer’s Stone. Seek money, find nothing — but seek the voice of the customer, and find the riches you never wanted but are darn glad to have. The extent to which founders really followed this precept is debatable. But in the early 2010s, three things happened to make start-ups more attractive to mercenaries looking for a lucrative exit. Finance became less cool and generally less profitable after 2008. Several start-ups of the past decade, led by Facebook, grew into robust and outrageously profitable behemoths. And interest rates came down to zero, creating a glut of money seeking returns and increasing the spreadsheet value of profits generated far in the future (which happen to be the only profits most start-ups generate). This potent combination spawned an avalanche of capital earmarked for start-ups and doled out by venture capitalists. Over the coming years, a portion of these venture dollars wound their way to genuinely innovative companies. Some of it landed in money pits like WeWork. Far too much was airdropped into the Ponzi-ridden wasteland of crypto. And a tiny sliver landed with me.  Before I met my co-founder, I spent a year trying to identify business opportunities that were both personally compelling and commercially viable. When I pitched my VC friends these ideas — for example, a niche media company — they were kind but unimpressed.  “What about addressable market?” my friend T asked over dinner. Translation: If you succeed, how much money could this make us? He was delighted I was pitching him so we could charge our meal to his firm, a prominent bank that had entered the VC game but retained its relatively stingy expense policy. “This could be a big business!” I said.  “My guy, I think we have different definitions of big,” he responded. Venture capitalists, I’d soon learn, don’t get out of bed unless a start-up has the potential to generate roughly a hundred million dollars of revenue per year. This implies the company is worth some multiple of that number, which in turn enables the average investor to “return the fund,” or generate a sum of returns equivalent to the whole pot of money they have to invest, if the company is bought or goes public. I had been introduced to the tyranny of the power law: the need for winners to win big because most start-ups fail.  I could have tried roughing it without venture funding, what the industry calls “bootstrapping.” The venture world has a condescending label for bootstrapped companies without scale potential: a “lifestyle” business, which roughly translates to: Good for you, now back to the sandbox until you’re ready to play with the big boys. Given my professed aim, this could have made sense. But there was so much funding for the taking, and part of me figured that if I was swinging, I may as well swing big. Why not make more than $6 million? So I narrowed my focus to the beam of a management consultant, scanning for hallmarks of a “venture-scale” business: addressable market, gross margins, incumbent NPS, lifetime value. You can Google these terms if you’d like, but taken in aggregate, all they mean is dollar signs.  As I talked through our idea with my co-founder, I ran through the VC-ratified checklist in my head: Large market — check. Fragmented landscape with dissatisfied customers — check. Most businesses are interesting if you look at them closely enough, but the perception of boringness — workflow automation, human-resource information systems — is good because competition is death; the cooler you sound at parties, the harder it is to succeed. The idea was far from perfect, but I was impatient, and after a rapid courtship, we decided to try raising a round of funding. If we could pull together enough to get started — a sum I estimated in the mid-six figures — we’d quit our jobs and found the company. I made a PowerPoint, following a handy  template  produced by Y Combinator: problem, solution, how you find customers, all vagaries eliminated. We received plenty of rejections. These surprised us, though a state of the world enabling two people who barely know each other to obtain hundreds of thousands of dollars with nothing but a few dozen prettily formatted words should have been far more astonishing. Some part of me was relieved by the rejections, which might have built slowly toward permission to throw in the towel, until we got our first yes — on the basis of a single phone call with an investor about the same age as me.  “What could go wrong?” he asked.  “Well, a lot,” I said, and I laid out the ways our thesis might be flawed, along with a theoretical solution to each snag. I treated this as a game, like switching to the affirmative after arguing the negative in a high-school debate, but he seemed convinced of something.  “Have you incorporated?” he asked.  When he emailed to say he was inclined to invest, I wondered what he had learned over the course of a half-hour to make him write this check. It was an astounding hourly rate. Later, I learned that he was rich and wrote many checks and that this check, in the grand scheme of this world, was small. After the first year, I never heard from him again. He’s still on our cap table today, making money while he sleeps.  We used the momentum from his “yes” to secure others, then incorporated our business using a tool created by a company called Stripe to make it easier for entrepreneurs to form corporations. As I typed our company name into the web form, I recalled that when my father started a small company decades ago, he had to write a physical letter to a legal agent in Delaware. I wondered briefly if there should be more friction in making a decision to start a company. To some extent, reducing friction is what the whole start-up game is about: Calling a cab when you want it, summoning food when you want it, an infinite radio that plays whatever you want on command. I clicked the button, submitted the form, and incorporated.  We hired a small team. Because we couldn’t afford to pay top dollar, we looked beyond the world of Ivy League, Big Tech, and management-consulting alumni to find moneyball hires mispriced by the market. The best of them were searching for a chance to prove their worth, and we gave it to them. The first year or so was a constant swing between the radiant high of making customers happy and the comedown of watching our jerry-rigged product disappoint them. I learned most customers are indifferent as long as the job gets done, about 20 percent are discerning but reasonable, and 3 percent will drive you nuts (no amount of support will satisfy them because the product they really need is therapy).  Buried in my master plan was an assumption that I could stay above the emotional fray of building a company. In hindsight, this was dumb. Start-ups are like sharks: They need movement to survive. But movement implies change, change implies volatility, and volatility implies fluctuations between good and bad. To succeed, you need to average more good days than bad, but bad days are impossible to avoid. And more than any other trait, good founders are defined by an obsession with doing things right; it was inevitable that my self-worth would become entangled with the performance of the business.  This felt great during the good times. Over the coming years, the company grew. At parties, where I had assiduously avoided the “What do you do?” question for years and responded when asked with a self-effacing bit on the mundanity of our market, people I didn’t know started to recognize our start-up. Some even used and liked the product.  But it didn’t feel as good when I looked around. In 2021, COVID and its aftermath marked  peak froth  for tech. The phenomenon of  SPACs  gave questionable but sexy companies a shortcut to going public. Crypto had reached full sail. Other founders I knew were raising absurd amounts of money for concepts that made a napkin business plan look fleshed out, spurred by a new class of leviathan VCs that had raised mind-bogglingly large funds. Founders could sell their own stock to these investors, sometimes pocketing more millions personally than their companies had earned in lifetime revenue. I still hadn’t made a cent beyond the salary I paid myself. I’d like to say we never considered taking this money, but we did try pitching a megafund partner during our last round of fundraising in the latter days of this madness. We told the story of our business, and he cut us off after 20 minutes with a curt, “You can clearly execute, but this won’t get big enough for us.” Market sentiment had turned against our particular vertical; it felt like we were sprinting to stay in place. Meanwhile, start-ups that had staked a claim on vast frontiers of innovation — immutable money, infinite frontier, and eternal life, as the Twitter bio of a prominent crypto evangelist proclaimed — were speeding on a moving walkway toward giant valuations and general adulation.  The mood inside our company all-hands during this time was confusing. We were growing sustainably, making even our pickiest customers happy, but it was a euphoric time in the world outside our Zoom screens; you might be having fun sober at the party, but it’s hard not to watch your friends on drugs and wonder what it’s like. The irony that selling fiction to investors was making these founders richer than selling a bona fide product to paying customers wasn’t lost on me. But it wasn’t just the money: After years of work, I had the temerity to be proud of the culture and product we had built. I had started to believe we could actually make a difference. In the market of 2021, our mission felt quaint; we may as well have been a lifestyle business.  At the tippy-top of the market, a party. I met another founder, a few years older than me, who had unequivocally made it, with a liquid net worth of multiples of my number. I was tipsy enough to ask all kinds of direct questions about what it was like. He was tipsy enough to answer unequivocally: Yes, having a fuck ton of money is great.  This is the difference between equity and cash: Partying in prime time in Aspen and Cannes; a gorgeous apartment in one of the best neighborhoods in our city, which I saw when he brought the after-party there; other apartments around the country and in a premier European capital where he lived a month or two out of the year. Meetings with anyone you want, whenever you want. Respect among both the tech cognoscenti and normal people who figured out what he had made. I knew this because of the deferential way I behaved around him.  “What gets worse?” I asked.  “You can probably guess,” he said. It was what you expect: People treat you less like a human and more like a mythical being or a human bank.  “Do you want more?” I asked.  I don’t remember his answer; things were hazy by this point. I staggered out of the fifth bar we visited that night, more intoxicated by the conversation than the drinks, just sober enough to be perturbed by my own fascination. Financially, my best-case outcome was a fraction of what this guy had already. No one needed the amount of money he had: an amount of wealth impossible to justify by any rational calculation of needs I could run on a spreadsheet (which explains why he was spending it on frivolous things). But now my number seemed too low. That night, I dreamt about market size, which in my subconscious manifested as a visual resembling the spirals of light that appear when you press directly on your eyeballs, rippling wider and wider. I woke up stressed.  Today, the market has turned for everyone. We’re growing slower than I want, but other start-ups, even the hot companies that dominated fundraising in past years, are showing far more signs of strain. Some have already flamed out spectacularly, and for those that survive, the gobs of money raised from megafunds come with a catch: It needs to be paid back first, which means that employees and early investors who expected millions won’t make any money unless they deliver on their tall tales.  The culprit is technically rising interest rates, but you could argue it began when founders and investors started to see the downside of swinging for the power law. The first venture funds formed as a way for savvy investors to help innovators create fundamental technologies like transistors, which required huge outlays of time and treasure before they could produce value. But in the past few years, causality inverted: Start-ups and entire markets were manufactured from whole cloth to meet the demand of overcapitalized venture funds searching for a home run.  Exit markets have dried up. I have yet to hit my number, though I’d guess my odds of getting there in the next couple years are decent. I would be disappointed if it didn’t happen, but I’m not sure it would change what I do next. At work, there’s some sense that we’ve missed the windfall, the easy IPO, the fairy godmother of acquisition that taps some lucky people and makes them rich. You’d think that would suck for morale. But from what I can tell, our team seems happy. What venture capitalists are now telling startups to do — forget “growth at all costs”, be profitable — is what we, partly by accident, have been doing all along. With the exception of the new wave of AI companies, the skies are full of Icaruses crashing to earth, but we’ve been here the whole time.'''},
    {'title': 'A Big Little Idea Called Legibility', 'content': '''James C. Scott’s fascinating and seminal book,  Seeing Like a State: How Certain  Schemes to Imp rove the Human Condition Have Failed , examines  how, across dozens of domains, ranging from agriculture and forestry, to  urban  planning and census-taking, a very predictable failure pattern keeps   recurring.  The pictures below, from the book (used with permission from the author) graphically and literally illustrate the central concept in this failure pattern, an idea called “legibility.” States and large organizations exhibit this pattern of behavior most dramatically, but individuals frequently exhibit it in their private lives as well.  Along with books like Gareth Morgan’s  Images of Organization , Lakoff and Johnson’s  Metaphors we Live By ,  William Whyte’s  The Organization Man  and Keith Johnstone’s  Impro , this book is one of the anchor texts for this blog. If I ever teach a course on ‘Ribbonfarmesque Thinking,’ all these books would be required reading. Continuing my series on complex and dense books that I cite often, but  are too difficult to review or summarize, here is a quick introduction  to the main idea.  The Authoritarian High-Modernist Recipe for Failure  Scott calls the thinking style behind the failure mode “authoritarian high modernism,” but as we’ll see, the failure mode is not limited to the brief intellectual reign of  high modernism  (roughly, the first half of the twentieth century). Here is the recipe:  Look at a complex and confusing reality, such as the social dynamics of an old city Fail to understand all the subtleties of how the complex reality works Attribute that failure to the irrationality of what you are looking at, rather than your own limitations Come up with an idealized blank-slate vision of what that reality ought to look like Argue that the relative simplicity and platonic orderliness of the vision represents rationality Use authoritarian power to impose that vision, by demolishing the old reality if necessary Watch your rational Utopia fail horribly The big mistake in this pattern of failure is projecting your subjective lack of comprehension onto the object you are looking at, as “irrationality.” We make this mistake because we are tempted by a desire for legibility.  Legibility and Control  Central to Scott’s thesis is the idea of legibility. He explains how he stumbled across the idea while researching efforts by nation states to settle or “sedentarize” nomads, pastoralists, gypsies and other peoples living non-mainstream lives:  The more I examined these efforts at sedentarization, the more I came to see them as a state’s attempt to make a society legible, to arrange the population in ways that simplified the classic state functions of taxation, conscription, and prevention of rebellion. Having begun to think in these terms, I began to see legibility as a central problem in statecraft. The pre-modern state was, in many crucial respects, particularly blind; it knew precious little about its subjects, their wealth, their landholdings and yields, their location, their very identity. It lacked anything like a detailed “map” of its terrain and its people.  The book is about the 2-3 century long process by which modern states reorganized the societies they governed, to make them more legible to the apparatus of governance. The state is not actually interested in the rich functional structure and complex behavior of the very organic entities that it governs (and indeed, is part of, rather than “above”). It merely views them as resources that must be organized in order to yield optimal returns according to a centralized, narrow, and strictly utilitarian logic. The attempt to maximize returns need not arise from the grasping greed of a predatory state. In fact, the dynamic is most often driven by a genuine desire to improve the lot of the people, on the part of governments with a popular, left-of-center mandate. Hence the subtitle (don’t jump to the conclusion that this is a simplistic anti-big-government conservative/libertarian view though; this failure mode is ideology-neutral, since it arises from a flawed pattern of reasoning rather than values).  The book begins with an early example, “scientific” forestry (illustrated in the picture above). The early modern state, Germany in this case, was only interested in maximizing tax revenues from forestry. This meant that the acreage, yield and market value of a forest had to be measured, and only these obviously relevant variables were comprehended by the statist mental model. Traditional wild and unruly forests were literally illegible to the state surveyor’s eyes, and this gave birth to “scientific” forestry: the gradual transformation of forests with a rich diversity of species growing wildly and randomly into orderly stands of the highest-yielding varieties. The resulting catastrophes — better recognized these days as the problems of monoculture — were inevitable.  The picture is not an exception, and the word “legibility” is not a metaphor; the actual visual/textual sense of the word (as in “readability”) is what is meant. The book is full of thought-provoking pictures like this: farmland neatly divided up into squares versus farmland that is confusing to the eye, but conforms to the constraints of local topography, soil quality, and hydrological patterns; rational and unlivable grid-cities like Brasilia, versus chaotic and alive cities like Sao Paolo. This might explain, by the way, why I resonated so strongly with the book.  The name “ribbonfarm” is inspired by the history of the geography of Detroit and its roots in “ribbon farms” (see my  About  page and the historic picture of Detroit ribbon farms below).  High-modernist (think Bauhaus and Le Corbusier) aesthetics necessarily lead to simplification, since a reality that serves many purposes presents itself as illegible to a vision informed by a singular purpose. Any elements that are non-functional with respect to the singular purpose tend to confuse, and are therefore eliminated during the attempt to “rationalize.” The deep failure in thinking lies is the mistaken assumption that thriving, successful and functional realities must necessarily be legible. Or at least more legible to the all-seeing statist eye in the sky (many of the pictures in the book are literally aerial views) than to the local, embedded, eye on the ground.  Complex realities turn this logic on its head; it is easier to comprehend the whole by walking among the trees, absorbing the gestalt, and becoming a holographic/fractal part of the forest, than by hovering above it.  This imposed simplification, in service of legibility to the state’s eye, makes the rich reality brittle, and failure follows. The imagined improvements are not realized. The metaphors of killing the golden goose, and the Procrustean bed come to mind.  The Psychology of Legibility  I suspect that what tempts us into this failure is that legibility quells the anxieties evoked by apparent chaos. There is more than mere stupidity at work.  In  Mind Wide Open , Steven Johnson’s entertaining story of his experiences subjecting himself to all sorts of medical scanning technologies, he describes his experience with getting an fMRI scan. Johnson tells the researcher that perhaps they should start by examining his brain’s baseline reaction to meaningless stimuli. He naively suggests a white-noise pattern as the right starter image. The researcher patiently informs him that subjects’ brains tend to go crazy when a white noise (high Shannon entropy) pattern is presented. The brain goes nuts trying to find order in the chaos. Instead, the researcher says, they usually start with something like a black-and-white checkerboard pattern. If my conjecture is correct, then the High Modernist failure-through-legibility-seeking formula is a large scale effect of the rationalization of the fear of (apparent) chaos.  [Techie aside: Complex realities look like Shannon white noise, but in terms of deeper structure, their Kolmogorov-Chaitin complexity is low relative to their Shannon entropy; they are like pseudo-random numbers or π, rather than real random numbers; I wrote a  two-part   series  on this long ago, that I meant to continue, but never did]. The Fertility of the Idea  The idea may seem simple (though it is surprisingly hard to find words to express it succinctly), but it is an extraordinarily fertile one, and helps explain all sorts of things. One of my favorite unexpected examples from the book is the “rationalization” of people names in the Philippines under Spanish rule (I won’t spoil it for you; read the book). In general, any aspect of a  complex folkway, in the sense of David Hackett Fischer’s  Albion’s Seed , can be made a victim of the high-modernist authoritarian failure formula. The process doesn’t always lead to unmitigated disaster. In some of the more redeeming examples, there is merely a shift in a balance of power between more global and more local interests. For example, we owe to this high-modernist formula the creation of a systematic, global scheme for measuring time, with sensible time zones. The bewilderingly illegible geography of time in the 18th century, while it served a lot of local purposes very well (and much better than even the best atomic clocks of today), would have made modern global infrastructure, ranging from the railroads (the original driver for temporal discipline in the United States) to airlines and the Internet, impossible. The Napoleanic era saw the spread of the metric system; again an idea that is highly rational from a centralized bird’s eye view, but often stupid with respect to the subtle local adaptions of the systems it displaced. Again this displaced a good deal of local power and value, and created many injustices and local irrationalities, but the shift brought with it the benefits of improved communication and wide-area commerce.  In all these cases, you could argue that the formula merely replaced a set of locally optimal modes of social organization with a globally optimal one. But that would be missing the point. The reason the formula is generally dangerous, and a formula for failure, is that it does not operate by a thoughtful consideration of local/global tradeoffs, but through the imposition of a singular view as “best for all” in a pseudo-scientific sense. The high-modernist reformer does not acknowledge (and often genuinely does not understand) that he/she is engineering a shift in optima and power, with costs as well as benefits. Instead, the process is driven by a naive “best for everybody” paternalism, that genuinely intends to improve the lives of the people it affects. The high-modernist reformer is driven by a naive-scientific Utopian vision that does not tolerate dissent, because it believes it is dealing in scientific truths.  The failure pattern is perhaps most evident in urban planning, a domain which seems to attract the worst of these reformers. A generation of planners, inspired by the crazed visions of Le Corbusier, created unlivable urban infrastructure around the world, from Braslia to Chandigarh. These cities end up with deserted empty centers populated only by the government workers forced to live there in misery (there is even a condition known as “Brasilitis” apparently), with slums and shanty towns emerging on the periphery of the planned center; ad hoc, bottom-up, re-humanizing damage control as it were. The book summarizes a very elegant critique of this approach to urban planning, and the true richness of what it displaces, due to  Jane Jacobs . Applying the Idea  Going beyond the book’s own examples, the ideas shed a whole new light on other stories/ideas. Two examples from my own reading should suffice.  The first is a book I read several years back, by Nicholas Dirks,  Castes of Mind: Colonialism and the Making of Modern India , which made the argument (originally proposed by the orientalist  Bernard Cohn ), that caste in the sense of the highly rigid and oppressive, 4-varna scheme was the result of the British failing to understand a complex social reality, and imposing on it their own simplistic understanding of it (the British Raj is sometimes called the “anthropological state” due to the obsessive care it took to document, codify and re-impose as a simplified, rigidified, Procrustean prescription, the social structure of pre-colonial India).  The argument of the book — obviously one that appeals to Indians (we like to blame the British or Islam when we can) — is that the original reality was a complex, functional social scheme, which the British turned into a rigid and oppressive machine by attempting to make it legible and governable. While I still don’t know whether the argument is justified, and whether the caste system before the British was as benevolent as the most ardent champions of this view make it out to be, the point here is that if it is true, Scott’s failure model would describe it perfectly. The second example is Gibbon’s  Decline and Fall of the Roman Empire , which I am slowly reading right now (I think it is going to be my personal Mount Everest; I expect to summit in 2013). Perhaps no other civilization, either in antiquity or today, was so fond of legible and governable social realities.  I haven’t yet made up my mind, but reading the history through the lens of Scott’s ideas, I think there is  strong case to be made that the fall of the Roman empire was a large-scale instance of the legibility-failure pattern. Like the British 1700 years later, the Romans did try to understand the illegible societies they encountered, but their failure in this effort ultimately led to the fall of the empire. Aside: if you decide to attempt Mount Everest along with me, take some time to explore the different editions of Gibbon available; I am reading a $0.99 19th century edition on my Kindle — all six volumes with annotations and comments from a decidedly pious — and critical — Christian editor. Sometimes I don’t know why I commit these acts of large-scale intellectual masochism. The link is to a modern, abridged Penguin edition.  Is the Model Relevant Today?  The phrase “high-modernist authoritarianism” might suggest that the views in this book only apply to those laughably optimistic, high-on-science-and-engineering high modernists of the 1930s. Surely we don’t fail in these dumb ways in our enlightened postmodern times?  Sadly, we do, for four reasons:  There is a decades-long time lag between the intellectual high-watermark of an ideology and the last of its effects There are large parts of the world, China in particular, where authoritarian high-modernism gets a visa, but postmodernism does not Perhaps most important: though this failure mode is easiest to describe in terms of high-modernist ideology, it is actually a basic failure mode for human thought that is time and ideology neutral. If it is true that the Romans and British managed to fail in these ways, so can the most postmodern Obama types. The language will be different, that’s all. And no, the currently popular “pave the cowpaths” and behavioral-economic “choice architecture” design philosophies do not provide immunity against these failure modes. In fact paving the cowpaths in naive ways is an instance of this failure mode (the way to avoid it would be to choose to not pave certain cowpaths).  Choice architecture (described as “Libertarian Paternalism” by its advocates) seems to merely dress up authoritarian high-modernism with a thin coat of caution and empirical experimentation. The basic and dangerous “I am more scientific/rational than thou” paternalism is still the central dogma. [Another Techie aside: For the technologists among you, a quick (and very crude) calibration  point should help: we are talking about the big brother of waterfall  planning here. The psychology is very similar to the urge to  throw legacy software away. In fact Joel Spolsky’s post on the subject  Things  You Should Never Do, Part I , reads like a narrower version of  Scott’s arguments. But Scott’s model is much deeper, more robust, more subtly argued, and more broadly applicable.  I haven’t yet thought it through, but I don’t think lean/agile software development can actually mitigate this failure mode anymore than choice architecture can mitigate it in public policy]  So do yourself a favor and read the book, even if it takes you months to get through. You will elevate your thinking about big questions.  High-Modernist Authoritarianism in Corporate and Personal Life  The application of these ideas in the personal/corporate domains actually interests me the most. Though Scott’s book is set within the context of public policy and governance, you can find exactly the same pattern in individual and corporate behavior. Individuals lacking the capacity for rich introspection apply dumb 12-step formulas to their lives and fail. Corporations: well, read the  Gervais Principle series  and  Images  of Organization . As a point of historical interest, Scott notes that the Soviet planning model, responsible for many spectacular legibility-failures, was derived from corporate Taylorist precedents, which Lenin initially criticized, but later modified and embraced. Final postscript: these ideas have strongly influenced  my book project , and apparently, I’ve been thinking about them for a long time without realizing it. A very early post on this blog (I think only a handful of you were around when I posted it), on the  Harry Potter series and its relation to my own work in robotics , contains some of these ideas. If I’d read this book before, that post would have been much better.'''},
    {'title': 'Reality has a surprising amount of detail', 'content': '''I.  My dad emigrated from Colombia to North America when he was 18 looking looking for a better life. For my brother and I that meant a lot of standing outside in the cold. My dad’s preferred method of improving his lot was improving lots, and my brother and I were “voluntarily” recruited to help working on the buildings we owned.  That’s how I came to spend a substantial part of my teenage years replacing fences, digging trenches, and building flooring and sheds. And if there’s one thing I’ve learned from all this building, it’s that reality has a surprising amount of detail.  This turns out to explain why its so easy for people to end up intellectually stuck. Even when they’re literally the best in the world in their field.  Consider building some basement stairs for a moment. Stairs seem pretty simple at first, and at a high level they are simple, just two long, wide parallel boards (2” x 12” x 16’), some boards for the stairs and an angle bracket on each side to hold up each stair. But as you actually start building you’ll find there’s a surprising amount of nuance.  The first thing you’ll notice is that there are actually quite a few subtasks. Even at a high level, you have to cut both ends of the 2x12s at the correct angles; then screw in some u-brackets to the main floor to hold the stairs in place; then screw in the 2x12s into the u-brackets; then attach the angle brackets for the stairs; then screw in the stairs.  Next you’ll notice that each of those steps above decomposes into several steps, some of which have some tricky details to them due to the properties of the materials and task and the limitations of yourself and your tools.  The first problem you’ll encounter is that cutting your 2x12s to the right angle is a bit complicated because there’s no obvious way to trace the correct angles. You can either get creative (there is a way to trace it), or you can bust out your trig book and figure out how to calculate the angle and position of the cuts.  You’ll probably also want to look up what are reasonable angles for stairs. What looks reasonable when you’re cutting and what feels safe can be different. Also, you’re probably going to want to attach a guide for your circular saw when cutting the angle on the 2x12s because the cut has to be pretty straight.  When you’re ready to you will quickly find that getting the stair boards at all the same angle is non-trivial. You’re going to need something that can give you an angle to the main board very consistently. Once you have that, and you’ve drawn your lines, you may be dismayed to discover that your straight looking board is not that straight. Lumber warps after it’s made because it was cut when it was new and wet and now it’s dryer, so no lumber is perfectly straight.  Once you’ve gone back to the lumber store and gotten some straighter 2x12s and redrawn your lines, you can start screwing in your brackets. Now you’ll learn that despite starting aligned with the lines you drew, after screwing them in, your angle brackets are no longer quite straight because the screws didn’t go in quite straight and now they tightly secure the bracket at the wrong angle. You can fix that by drilling guide holes first. Also you’ll have to move them an inch or so because it’s more or less impossible to get a screw to go in differently than it did the first time in the same hole.  Now you’re finally ready to screw in the stair boards. If your screws are longer than 2”, you’ll need different ones, otherwise they will poke out the top of the board and stab you in the foot.  At every step and every level there’s an abundance of detail with material consequences.  It’s tempting to think ‘So what?’ and dismiss these details as incidental or specific to stair carpentry. And they are specific to stair carpentry; that’s what makes them details. But the existence of a surprising number of meaningful details is not specific to stairs. Surprising detail is a near universal property of getting up close and personal with reality.  You can see this everywhere if you look. For example, you’ve probably had the experience of doing something for the first time, maybe growing vegetables or using a Haskell package for the first time, and being frustrated by how many annoying snags there were. Then you got more practice and then you told yourself ‘man, it was so simple all along, I don’t know why I had so much trouble’. We run into a fundamental property of the universe and mistake it for a personal failing.  If you’re a programmer, you might think that the fiddliness of programming is a special feature of programming, but really it’s that everything is fiddly, but you only notice the fiddliness when you’re new, and in programming you do new things more often.  You might think the fiddly detailiness of things is limited to human centric domains, and that physics itself is simple and elegant. That’s true in some sense – the physical laws themselves tend to be quite simple – but the manifestation of those laws is often complex and counterintuitive.  II. Boiling A Watched Pot  Consider the boiling of water. That’s straightforward, water boils at 100 °C, right?  Well the stairs seemed simple too, so let’s double check.  Put yourself in the shoes of someone at the start of the 1800’s, with only a crude, unmarked mercury thermometer, trying to figure the physics of temperature.  Go to your stove, put some water in a pot, start heating some water, and pay attention as it heats.  (I suggest actually doing this)  The first thing you’ll probably notice is a lot of small bubbles gathering on the surface of the pot. Is that boiling? The water’s not that hot yet; you can still even stick your finger in. Then the bubbles will appear faster and start rising, but they somehow seem ‘unboiling’. Then you’ll start to see little bubble storms in patches, and you start to hear a hissing noise. Is that Boiling? Sort of? It doesn’t really look like boiling. The bubble storms grow larger and start releasing bigger bubbles. Eventually the bubbles get big and the surface of the water grows turbulent as the bubbles begin to make it to the surface. Finally we seem to have reached real boiling. I guess this is the boiling point? That seems kind of weird, what were the things that happened earlier if not boiling.  To make matters worse, if you’d used a glass pot instead of a metal one, the water would boil at a higher temperature. If you cleaned the glass vessel with sulfuric acid, to remove any residue, you’d find that you can heat water substantially more before it boils and when it does boil it boils in little explosions of boiling and the temperature fluctuates unstably.  Worse still, if you trap a drop of water between two other liquids and heat it, you can raise the temperature to at least 300 °C with nothing happening. That kind of makes a mockery of the statement ‘water boils at 100 °C’.  It turns out that ‘boiling’ is a lot more complicated than you thought.  This surprising amount of detail is is not limited to “human” or “complicated” domains, it is a near universal property of everything from space travel to sewing, to your internal experience of your own mind.  III. Invisible vs. Transparent Detail And Getting Intellectually Stuck  Again, you might think ‘So what? I guess things are complicated but I can just notice the details as I run into them; no need to think specifically about this’. And if you are doing things that are relatively simple, things that humanity has been doing for a long time, this is often true. But if you’re trying to do difficult things, things which are not known to be possible, it is not true.  The more difficult your mission, the more details there will be that are critical to understand for success.  You might hope that these surprising details are irrelevant to your mission, but not so. Some of them will end up being key. Wood’s tendency to warp means it’s more accurate to trace a cut than to calculate its length and angle. The possibility of superheating liquids means it’s important to use a  packed bed  when boiling liquids in industrial processes lest your process be highly inefficient and unpredictable. The massive difference in weight between a rocket full of fuel and an empty one means that a reusable rocket can’t hover if it can’t throttle down to a very small fraction of its original thrust, which in turn means it must plan its trajectory very precisely to achieve 0 velocity at exactly the moment it reaches the ground. You might also hope that the important details will be obvious when you run into them, but not so. Such details aren’t automatically visible, even when you’re directly running up against them. Things can just seem messy and noisy instead. ‘Spirit’ thermometers, made using brandy and other liquors, were in common use in the early days of thermometry. They were even considered as a potential standard fluid for thermometers. It wasn’t until the careful work of Swiss physicist Jean-André De Luc in the 18th century that physicists realized that alcohol thermometers are highly nonlinear and highly variable depending on concentration, which is in turn hard to measure.  You’ve probably also had experiences where you were trying to do something and growing increasingly frustrated because it wasn’t working, and then finally, after some time you realize that your solution method can’t possibly work.  Another way to see that noticing the right details is hard, is that different people end up noticing different details. My brother and I once built a set of stairs for the garage with my dad, and we ran into the problem of determining where to cut the long boards so they lie at the correct angle. After struggling with the problem for a while (and I do mean struggling, a 16’ long board is heavy), we got to arguing. I remembered from trig that we could figure out angle so I wanted to go dig up my textbook and think about it. My dad said, ‘no, no, no, let’s just trace it’, insisting that we could figure out how to do it.  I kept arguing because I thought I was right. I felt really annoyed with him and he was annoyed with me. In retrospect, I think I saw the fundamental difficulty in what we were doing and I don’t think he appreciated it (look at the stairs picture and see if you can figure it out), he just heard ‘let’s draw some diagrams and compute the angle’ and didn’t think that was the solution, and if he had appreciated the thing that I saw I think he would have been more open to drawing some diagrams. But at the same time, he also understood that diagrams and math don’t account for the shape of the wood, which I did not appreciate. If we had been able to get these points across, we could have come to consensus. Drawing a diagram was probably a good idea, but computing the angle was probably not. Instead we stayed annoyed at each other for the next 3 hours.  Before you’ve noticed important details they are, of course, basically invisible. It’s hard to put your attention on them because you don’t even know what you’re looking for. But after you see them they quickly become so integrated into your intuitive models of the world that they become essentially transparent. Do you remember the insights that were crucial in learning to ride a bike or drive? How about the details and insights you have that led you to be good at the things you’re good at?  This means it’s really easy to get stuck. Stuck in your current way of seeing and thinking about things. Frames are made out of the details that seem important to you. The important details you haven’t noticed are invisible to you, and the details you have noticed seem completely obvious and you see right through them. This all makes makes it difficult to imagine how you could be missing something important.  That’s why if you ask an anti-climate change person (or a climate scientist) “what could convince you you were wrong?” you’ll likely get back an answer like “if it turned out all the data on my side was faked” or some other extremely strong requirement for evidence rather than “I would start doubting if I noticed numerous important mistakes in the details my side’s data and my colleagues didn’t want to talk about it”. The second case is much more likely than the first, but you’ll never see it if you’re not paying close attention.  If you’re trying to do impossible things, this effect should chill you to your bones. It means you could be intellectually stuck right at this very moment, with the evidence right in front of your face and you just can’t see it.  This problem is not easy to fix, but it’s not impossible either. I’ve mostly fixed it for myself. The direction for improvement is clear: seek detail you would not normally notice about the world. When you go for a walk, notice the unexpected detail in a flower or what the seams in the road imply about how the road was built. When you talk to someone who is smart but just seems so wrong, figure out what details seem important to them and why. In your work, notice how that meeting actually wouldn’t have accomplished much if Sarah hadn’t pointed out that one thing. As you learn, notice which details actually change how you think.  If you wish to not get stuck, seek to perceive what you have not yet perceived.  Comments'''}
]

def process_articles(articles):
    """
    Truncate each article's content to the first 5000 words to avoid running into token limits.

    :param articles:
    :return:
    """
    result = []
    for a in articles:
        result.append({'title': a['title'][0:400], 'content': a['content'][0:2000]})

    return result

articles = process_articles(_articles)